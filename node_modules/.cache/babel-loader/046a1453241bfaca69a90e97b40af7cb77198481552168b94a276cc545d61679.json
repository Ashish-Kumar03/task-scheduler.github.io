{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ashish\\\\CascadeProjects\\\\task-scheduler-app\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem('taskflow_user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Check stored users\n      const users = JSON.parse(localStorage.getItem('taskflow_users') || '[]');\n      const foundUser = users.find(u => u.email === email && u.password === password);\n      if (foundUser) {\n        const userWithoutPassword = {\n          ...foundUser\n        };\n        delete userWithoutPassword.password;\n        setUser(userWithoutPassword);\n        localStorage.setItem('taskflow_user', JSON.stringify(userWithoutPassword));\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid credentials'\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Login failed'\n      };\n    }\n  };\n  const signup = async userData => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const users = JSON.parse(localStorage.getItem('taskflow_users') || '[]');\n\n      // Check if user already exists\n      if (users.find(u => u.email === userData.email)) {\n        return {\n          success: false,\n          error: 'User already exists'\n        };\n      }\n      const newUser = {\n        id: Date.now().toString(),\n        ...userData,\n        createdAt: new Date().toISOString()\n      };\n      users.push(newUser);\n      localStorage.setItem('taskflow_users', JSON.stringify(users));\n      const userWithoutPassword = {\n        ...newUser\n      };\n      delete userWithoutPassword.password;\n      setUser(userWithoutPassword);\n      localStorage.setItem('taskflow_user', JSON.stringify(userWithoutPassword));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Signup failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('taskflow_user');\n  };\n  const value = {\n    user,\n    login,\n    signup,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","login","email","password","Promise","resolve","setTimeout","users","foundUser","find","u","userWithoutPassword","setItem","stringify","success","error","signup","userData","newUser","id","Date","now","toString","createdAt","toISOString","push","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Ashish/CascadeProjects/task-scheduler-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for stored user data on app load\n    const storedUser = localStorage.getItem('taskflow_user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Check stored users\n      const users = JSON.parse(localStorage.getItem('taskflow_users') || '[]');\n      const foundUser = users.find(u => u.email === email && u.password === password);\n      \n      if (foundUser) {\n        const userWithoutPassword = { ...foundUser };\n        delete userWithoutPassword.password;\n        setUser(userWithoutPassword);\n        localStorage.setItem('taskflow_user', JSON.stringify(userWithoutPassword));\n        return { success: true };\n      } else {\n        return { success: false, error: 'Invalid credentials' };\n      }\n    } catch (error) {\n      return { success: false, error: 'Login failed' };\n    }\n  };\n\n  const signup = async (userData) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      const users = JSON.parse(localStorage.getItem('taskflow_users') || '[]');\n      \n      // Check if user already exists\n      if (users.find(u => u.email === userData.email)) {\n        return { success: false, error: 'User already exists' };\n      }\n      \n      const newUser = {\n        id: Date.now().toString(),\n        ...userData,\n        createdAt: new Date().toISOString()\n      };\n      \n      users.push(newUser);\n      localStorage.setItem('taskflow_users', JSON.stringify(users));\n      \n      const userWithoutPassword = { ...newUser };\n      delete userWithoutPassword.password;\n      setUser(userWithoutPassword);\n      localStorage.setItem('taskflow_user', JSON.stringify(userWithoutPassword));\n      \n      return { success: true };\n    } catch (error) {\n      return { success: false, error: 'Signup failed' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('taskflow_user');\n  };\n\n  const value = {\n    user,\n    login,\n    signup,\n    logout,\n    loading\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACxD,IAAIF,UAAU,EAAE;MACdH,OAAO,CAACM,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACjC;IACAD,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF;MACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;MAEvD;MACA,MAAME,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC;MACxE,MAAMU,SAAS,GAAGD,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,KAAK,KAAKA,KAAK,IAAIQ,CAAC,CAACP,QAAQ,KAAKA,QAAQ,CAAC;MAE/E,IAAIK,SAAS,EAAE;QACb,MAAMG,mBAAmB,GAAG;UAAE,GAAGH;QAAU,CAAC;QAC5C,OAAOG,mBAAmB,CAACR,QAAQ;QACnCV,OAAO,CAACkB,mBAAmB,CAAC;QAC5Bd,YAAY,CAACe,OAAO,CAAC,eAAe,EAAEb,IAAI,CAACc,SAAS,CAACF,mBAAmB,CAAC,CAAC;QAC1E,OAAO;UAAEG,OAAO,EAAE;QAAK,CAAC;MAC1B,CAAC,MAAM;QACL,OAAO;UAAEA,OAAO,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAsB,CAAC;MACzD;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAe,CAAC;IAClD;EACF,CAAC;EAED,MAAMC,MAAM,GAAG,MAAOC,QAAQ,IAAK;IACjC,IAAI;MACF;MACA,MAAM,IAAIb,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MAEvD,MAAME,KAAK,GAAGR,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC;;MAExE;MACA,IAAIS,KAAK,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACR,KAAK,KAAKe,QAAQ,CAACf,KAAK,CAAC,EAAE;QAC/C,OAAO;UAAEY,OAAO,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAsB,CAAC;MACzD;MAEA,MAAMG,OAAO,GAAG;QACdC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;QACzB,GAAGL,QAAQ;QACXM,SAAS,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC;MACpC,CAAC;MAEDjB,KAAK,CAACkB,IAAI,CAACP,OAAO,CAAC;MACnBrB,YAAY,CAACe,OAAO,CAAC,gBAAgB,EAAEb,IAAI,CAACc,SAAS,CAACN,KAAK,CAAC,CAAC;MAE7D,MAAMI,mBAAmB,GAAG;QAAE,GAAGO;MAAQ,CAAC;MAC1C,OAAOP,mBAAmB,CAACR,QAAQ;MACnCV,OAAO,CAACkB,mBAAmB,CAAC;MAC5Bd,YAAY,CAACe,OAAO,CAAC,eAAe,EAAEb,IAAI,CAACc,SAAS,CAACF,mBAAmB,CAAC,CAAC;MAE1E,OAAO;QAAEG,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAED,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAgB,CAAC;IACnD;EACF,CAAC;EAED,MAAMW,MAAM,GAAGA,CAAA,KAAM;IACnBjC,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAAC8B,UAAU,CAAC,eAAe,CAAC;EAC1C,CAAC;EAED,MAAMC,KAAK,GAAG;IACZpC,IAAI;IACJS,KAAK;IACLe,MAAM;IACNU,MAAM;IACNhC;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,WAAW,CAAC6C,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtC,QAAA,EAChCA;EAAQ;IAAAwC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC1C,GAAA,CAtFWF,YAAY;AAAA6C,EAAA,GAAZ7C,YAAY;AAAA,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}